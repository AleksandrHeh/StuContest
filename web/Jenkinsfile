void setBuildStatus(String message, String state, String my_repo) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: my_repo],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline{
    agent any
    options {
        timestamps()
    }
    environment {
        GitUrl = """${sh(
            returnStdout: true,
            script: 'git config --get remote.origin.url'
        )}"""
    }
    triggers {
        githubPush()
    }
    stages {
        stage("Init docker"){
            steps {
                sh 'docker-compose pull'
                sh 'docker-compose build --pull'
                sh 'docker-compose up -d'
            }
        }
        stage("Run Dev"){
            steps {
                sh 'docker-compose run dev_app make run'
            }
        }
        stage("Test"){
            steps {
                sh 'docker-compose run dev_app make test'
            }
        }
        stage("Down dev"){
            steps {
                sh 'docker-compose down --remove-orphans'
            }
        }
        stage("Push to Prod"){
            steps {
                echo "This project works in local networks"
            }
        }
    }
    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS", "${env.GitUrl}");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE", "${env.GitUrl}");
        }
    }
}

